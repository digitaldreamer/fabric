On a fresh server you must first set up a sudo user


################################################################
START SERVER
################################################################

1) login to the server and change the root password
passwd

2) update apt-get
apt-get update

3) install database (mysql)
apt-get install mysql-server

4) add new user
adduser <user>
passwd <user>

5) add www-data to the <user>'s group
usermod -a -G <user> www-data

6) add <user> to the sudo group
usermod -a -G sudo <user>

7) if wanted, remove password prompt for sudo
visudo

8) login as <user> and set up .ssh keys. Add private keys to authorized_keys to disable ssh pasword prompts
touch .ssh/authorized_keys
ssh-keygen -t rsa -C "<server>"

9) initialization is complete. Set the <env> variables in the GLOBALS section in local_settings.py, and run fabric to set up the environment
fab server


################################################################
POST INITIALIAZION
################################################################

1) create a new database user
mysql -u root -p
CREATE DATABASE django_project;
CREATE USER user IDENTIFIED BY 'pass';
GRANT ALL ON django_project.* TO user;

2) nginx
copy the example.com script to create the domain specific nginx script

3) apache
copy the example.com script to create the domain specific apache script

4) crate any main directories that don't exist, and chwon to user
mkdir DJANGO_PATH
mkdir HTML_PATH
mkdir ENVS_PATH
mkdir BACKUPS_PATH
chown user:user .


################################################################
DEPLOY
################################################################

1) with the server initialized and prepped, deploy the project
fab deploy

1) django project
setup local_settings.py
syncdb

2) cron
link any cron scripts

3) restart servers
fab restart_servers
